pal <- brewer.pal(8,"Accent")
png(titleName, width=12, height=8, units="in", res=500)
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(6,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=pal)
dev.off()
dev.off()
pal <- brewer.pal(8,"Accent")
png(titleName, width=12, height=8, units="in", res=500)
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(6,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=pal)
dev.off()
pal <- brewer.pal(8,"Pastel2")
png(titleName, width=12, height=8, units="in", res=500)
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=pal)
dev.off()
pal <- brewer.pal(8,"Dark2")
png(titleName, width=12, height=8, units="in", res=500)
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=pal)
dev.off()
pal <- brewer.pal(8,"Set2")
png(titleName, width=12, height=8, units="in", res=500)
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=pal)
dev.off()
pal <- brewer.pal(8,"Dark2")
png(titleName, width=12, height=8, units="in", res=500)
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=pal)
dev.off()
# url <- "https://docs.google.com/spreadsheets/d/12MK9EFmPww4Vw9P6BShmhOolH1C45Irz0jdzE0QR3hs/pubhtml"
#url <- "https://docs.google.com/a/toutbay.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/edit#gid=0"
# url <- "https://docs.google.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/pubhtml"
library(XML)
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
doc <- paste(readLines(url), collapse=" ")
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE)
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
library(wordcloud)
library(tm)
library(iterators)
library(itertools)
library(RColorBrewer)
##make sure it is the publisHTML URL IE pubhtml#
url <- "https://docs.google.com/a/toutbay.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/pubhtml#"
googleSpreadSheet <- readGoogleSheet(url)
googleSpreadSheet <- cleanGoogleTable(googleSpreadSheet, table=1)
#HardCoded by ordinal position of columns in Google SpreadSheet. Additional columns get 1
masterWeightsVector <- c(6,4,4,4,3,3,2,2)
#a color list based on frequency or by word order if ordered.colors is specified.
masterColorVector <- c("red","blue","green","red","Orange","Yellow")
WordsColorVector <- character()
WordsVector <- character()
WordsFreqVector <- numeric();
##Iterate over Data Frame
itrGoogleSpreadSheet <- ihasNext(googleSpreadSheet)
itrVectorWeights <- ihasNext(masterWeightsVector)
itrVectorColor <- ihasNext(masterColorVector)
while (hasNext(itrGoogleSpreadSheet)) {
words = nextElem(itrGoogleSpreadSheet)
if (hasNext(itrVectorWeights)==FALSE){wordFreq = 1} else{wordFreq = nextElem(itrVectorWeights)}
if (hasNext(itrVectorColor)==FALSE){wordColor = "blue"} else{wordColor = nextElem(itrVectorColor)}
WordsVector <- c(WordsVector,words[!is.na(words)])
WordsFreqVector <-c(WordsFreqVector,rep(wordFreq,length(words[!is.na(words)])))
WordsColorVector <-c(WordsColorVector,rep(wordColor,length(words[!is.na(words)])))
}
titleName <- "WordCloud.png"
#fileName <- deparse(substitute(corpus))
# save the image in png format
# png(titleName, width=12, height=8, units="in", res=500)
# layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
# par(mar=rep(0, 4))
# plot.new()
# text(x=0.5, y=0.5,"")
# wordcloud(WordsVector, WordsFreqVector,
#           scale=c(8, .8), min.freq = 1,
#           max.words = Inf, random.order = FALSE,
#           rot.per = .15, colors = pal2,main="Title")
# dev.off()
fix(WordsColorVector)
#HardCoded by ordinal position of columns in Google SpreadSheet. Additional columns get 1
masterWeightsVector <- c(6,4,4,4,3,3,2,2)
#a color list based on frequency or by word order if ordered.colors is specified.
masterColorVector <- c("red","blue","green","red","Orange","Yellow")
WordsColorVector <- character()
WordsVector <- character()
WordsFreqVector <- numeric();
##Iterate over Data Frame
itrGoogleSpreadSheet <- ihasNext(googleSpreadSheet)
itrVectorWeights <- ihasNext(masterWeightsVector)
itrVectorColor <- ihasNext(masterColorVector)
while (hasNext(itrGoogleSpreadSheet)) {
words = nextElem(itrGoogleSpreadSheet)
if (hasNext(itrVectorWeights)==FALSE){wordFreq = 1} else{wordFreq = nextElem(itrVectorWeights)}
if (hasNext(itrVectorColor)==FALSE){} else{wordColor = nextElem(itrVectorColor)}
WordsVector <- c(WordsVector,words[!is.na(words)])
WordsFreqVector <-c(WordsFreqVector,rep(wordFreq,length(words[!is.na(words)])))
WordsColorVector <-c(WordsColorVector,rep(wordColor,length(words[!is.na(words)])))
}
titleName <- "WordCloud.png"
#fileName <- deparse(substitute(corpus))
# save the image in png format
# png(titleName, width=12, height=8, units="in", res=500)
# layout(matrix(c(1, 2), nrow=2), heights=c(1, 4))
# par(mar=rep(0, 4))
# plot.new()
# text(x=0.5, y=0.5,"")
# wordcloud(WordsVector, WordsFreqVector,
#           scale=c(8, .8), min.freq = 1,
#           max.words = Inf, random.order = FALSE,
#           rot.per = .15, colors = pal2,main="Title")
# dev.off()
fix(WordsColorVector)
png(titleName, width=12, height=8, units="in", res=500)
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=WordsColorVector, ordered.colors=TRUE)
dev.off()
fix(WordsColorVector)
masterColorVector <- c("#999999","blue","green","red","Orange","Yellow")
itrGoogleSpreadSheet <- ihasNext(googleSpreadSheet)
itrVectorWeights <- ihasNext(masterWeightsVector)
itrVectorColor <- ihasNext(masterColorVector)
while (hasNext(itrGoogleSpreadSheet)) {
words = nextElem(itrGoogleSpreadSheet)
if (hasNext(itrVectorWeights)==FALSE){wordFreq = 1} else{wordFreq = nextElem(itrVectorWeights)}
if (hasNext(itrVectorColor)==FALSE){} else{wordColor = nextElem(itrVectorColor)}
WordsVector <- c(WordsVector,words[!is.na(words)])
WordsFreqVector <-c(WordsFreqVector,rep(wordFreq,length(words[!is.na(words)])))
WordsColorVector <-c(WordsColorVector,rep(wordColor,length(words[!is.na(words)])))
}
titleName <- "WordCloud.png"
#pal <- brewer.pal(8,"Dark2")
#pal <- brewer.pal(8,"Pastel2")
png(titleName, width=12, height=8, units="in", res=500)
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=WordsColorVector, ordered.colors=TRUE)
dev.off()
#a color list based on frequency or by word order if ordered.colors is specified.
masterColorVector <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
WordsColorVector <- character()
WordsVector <- character()
WordsFreqVector <- numeric();
##Iterate over Data Frame
itrGoogleSpreadSheet <- ihasNext(googleSpreadSheet)
itrVectorWeights <- ihasNext(masterWeightsVector)
itrVectorColor <- ihasNext(masterColorVector)
while (hasNext(itrGoogleSpreadSheet)) {
words = nextElem(itrGoogleSpreadSheet)
if (hasNext(itrVectorWeights)==FALSE){wordFreq = 1} else{wordFreq = nextElem(itrVectorWeights)}
if (hasNext(itrVectorColor)==FALSE){} else{wordColor = nextElem(itrVectorColor)}
WordsVector <- c(WordsVector,words[!is.na(words)])
WordsFreqVector <-c(WordsFreqVector,rep(wordFreq,length(words[!is.na(words)])))
WordsColorVector <-c(WordsColorVector,rep(wordColor,length(words[!is.na(words)])))
}
titleName <- "WordCloud.png"
#pal <- brewer.pal(8,"Dark2")
#pal <- brewer.pal(8,"Pastel2")
png(titleName, width=12, height=8, units="in", res=500)
##FONT vfont=c("sans serif","plain"))
#wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=pal)
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=WordsColorVector, ordered.colors=TRUE)
dev.off()
pal <- brewer.pal(8,"Set1")
png(titleName, width=12, height=8, units="in", res=500)
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=pal)
dev.off()
masterWeightsVector <- c(6,4,4,4,3,3,2,2)
#a color list based on frequency or by word order if ordered.colors is specified. **based off Column
#masterColorVector <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
masterColorVector <- brewer.pal(8,"Dark2")
WordsColorVector <- character()
WordsVector <- character()
WordsFreqVector <- numeric();
##Iterate over Data Frame
itrGoogleSpreadSheet <- ihasNext(googleSpreadSheet)
itrVectorWeights <- ihasNext(masterWeightsVector)
itrVectorColor <- ihasNext(masterColorVector)
while (hasNext(itrGoogleSpreadSheet)) {
words = nextElem(itrGoogleSpreadSheet)
if (hasNext(itrVectorWeights)==FALSE){wordFreq = 1} else{wordFreq = nextElem(itrVectorWeights)}
if (hasNext(itrVectorColor)==FALSE){} else{wordColor = nextElem(itrVectorColor)}
WordsVector <- c(WordsVector,words[!is.na(words)])
WordsFreqVector <-c(WordsFreqVector,rep(wordFreq,length(words[!is.na(words)])))
WordsColorVector <-c(WordsColorVector,rep(wordColor,length(words[!is.na(words)])))
}
titleName <- "WordCloud.png"
png(titleName, width=12, height=8, units="in", res=500)
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=WordsColorVector, ordered.colors=TRUE)
dev.off()
png(titleName, width=12, height=8, units="in", res=500)
##FONT vfont=c("sans serif","plain"))
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=WordsColorVector, ordered.colors=TRUE)
dev.off()
titleName <- "WordCloud.png"
png(titleName, width=12, height=8, units="in", res=500)
##FONT vfont=c("sans serif","plain"))
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .10,scale=c(3,.1), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=WordsColorVector, ordered.colors=TRUE)
dev.off()
png(titleName, width=12, height=8, units="in", res=500)
##FONT vfont=c("sans serif","plain"))
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .10,scale=c(3,.05), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=WordsColorVector, ordered.colors=TRUE)
dev.off()
png(titleName, width=12, height=8, units="in", res=500)
##FONT vfont=c("sans serif","plain"))
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .0,scale=c(3,.05), use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=WordsColorVector, ordered.colors=TRUE)
dev.off()
fix(WordsVector)
png(titleName, width=12, height=8, units="in", res=500)
##FONT vfont=c("sans serif","plain"))
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .0, use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=WordsColorVector, ordered.colors=TRUE)
dev.off()
png(titleName, width=12, height=8, units="in", res=500)
##FONT vfont=c("sans serif","plain"))
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15, use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=WordsColorVector, ordered.colors=TRUE)
dev.off()
png(titleName, width=12, height=8, units="in", res=500)
##FONT vfont=c("sans serif","plain"))
wordcloud(WordsVector, WordsFreqVector, max.words = 300, rot.per = .15, use.r.layout=FALSE, min.freq = 1,random.order=FALSE,colors=WordsColorVector, ordered.colors=TRUE)
dev.off()
install.packages("Gosummaries")
install.packages("GOsummaries")
# url <- "https://docs.google.com/spreadsheets/d/12MK9EFmPww4Vw9P6BShmhOolH1C45Irz0jdzE0QR3hs/pubhtml"
#url <- "https://docs.google.com/a/toutbay.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/edit#gid=0"
# url <- "https://docs.google.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/pubhtml"
library(XML)
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
doc <- paste(readLines(url), collapse=" ")
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE)
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
library(wordcloud)
library(tm)
library(iterators)
library(itertools)
library(RColorBrewer)
library(GOsummaries)
install.packages("limma")
library(limma)
url <- "https://docs.google.com/a/toutbay.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/pubhtml#"
googleSpreadSheet <- readGoogleSheet(url)
googleSpreadSheet <- cleanGoogleTable(googleSpreadSheet, table=1)
#HardCoded by ordinal position of columns in Google SpreadSheet. Additional columns get 1
masterWeightsVector <- c(6,4,4,4,3,3,2,2)
#a color list based on frequency or by word order if ordered.colors is specified. **based off Column
#masterColorVector <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
masterColorVector <- brewer.pal(8,"Dark2")
WordsColorVector <- character()
WordsVector <- character()
WordsFreqVector <- numeric();
##Iterate over Data Frame
itrGoogleSpreadSheet <- ihasNext(googleSpreadSheet)
itrVectorWeights <- ihasNext(masterWeightsVector)
itrVectorColor <- ihasNext(masterColorVector)
while (hasNext(itrGoogleSpreadSheet)) {
words = nextElem(itrGoogleSpreadSheet)
if (hasNext(itrVectorWeights)==FALSE){wordFreq = 1} else{wordFreq = nextElem(itrVectorWeights)}
if (hasNext(itrVectorColor)==FALSE){} else{wordColor = nextElem(itrVectorColor)}
if (hasNext(itrGoogleSpreadSheet))==FALSE){ WordsVector <- toupper(c(WordsVector,words[!is.na(words)]))}
else{ WordsVector <- c(WordsVector,words[!is.na(words)])}
WordsVector <- c(WordsVector,words[!is.na(words)])
WordsFreqVector <-c(WordsFreqVector,rep(wordFreq,length(words[!is.na(words)])))
WordsColorVector <-c(WordsColorVector,rep(wordColor,length(words[!is.na(words)])))
}
url <- "https://docs.google.com/a/toutbay.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/pubhtml#"
googleSpreadSheet <- readGoogleSheet(url)
googleSpreadSheet <- cleanGoogleTable(googleSpreadSheet, table=1)
# url <- "https://docs.google.com/spreadsheets/d/12MK9EFmPww4Vw9P6BShmhOolH1C45Irz0jdzE0QR3hs/pubhtml"
#url <- "https://docs.google.com/a/toutbay.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/edit#gid=0"
# url <- "https://docs.google.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/pubhtml"
library(XML)
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
doc <- paste(readLines(url), collapse=" ")
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE)
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
url <- "https://docs.google.com/a/toutbay.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/pubhtml#"
googleSpreadSheet <- readGoogleSheet(url)
googleSpreadSheet <- cleanGoogleTable(googleSpreadSheet, table=1)
#HardCoded by ordinal position of columns in Google SpreadSheet. Additional columns get 1
masterWeightsVector <- c(6,4,4,4,3,3,2,2)
#a color list based on frequency or by word order if ordered.colors is specified. **based off Column
#masterColorVector <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
masterColorVector <- brewer.pal(8,"Dark2")
WordsColorVector <- character()
WordsVector <- character()
WordsFreqVector <- numeric();
itrGoogleSpreadSheet <- ihasNext(googleSpreadSheet)
itrVectorWeights <- ihasNext(masterWeightsVector)
itrVectorColor <- ihasNext(masterColorVector)
while (hasNext(itrGoogleSpreadSheet)) {
words = nextElem(itrGoogleSpreadSheet)
if (hasNext(itrVectorWeights)==FALSE){wordFreq = 1} else{wordFreq = nextElem(itrVectorWeights)}
if (hasNext(itrVectorColor)==FALSE){} else{wordFreq = nextElem(itrVectorColor)}
if (hasNext(itrGoogleSpreadSheet))==FALSE){ WordsVector = toupper(c(WordsVector,words[!is.na(words)]))}
else{WordsVector <- c(WordsVector,words[!is.na(words)])}
WordsVector <- c(WordsVector,words[!is.na(words)])
WordsFreqVector <-c(WordsFreqVector,rep(wordFreq,length(words[!is.na(words)])))
WordsColorVector <-c(WordsColorVector,rep(wordColor,length(words[!is.na(words)])))
}
while (hasNext(itrGoogleSpreadSheet)) {
words = nextElem(itrGoogleSpreadSheet)
if (hasNext(itrVectorWeights)==FALSE){wordFreq = 1} else{wordFreq = nextElem(itrVectorWeights)}
if (hasNext(itrVectorColor)==FALSE){} else{wordFreq = nextElem(itrVectorColor)}
if (hasNext(itrGoogleSpreadSheet)==FALSE){ WordsVector = toupper(c(WordsVector,words[!is.na(words)]))}
else{WordsVector <- c(WordsVector,words[!is.na(words)])}
WordsVector <- c(WordsVector,words[!is.na(words)])
WordsFreqVector <-c(WordsFreqVector,rep(wordFreq,length(words[!is.na(words)])))
WordsColorVector <-c(WordsColorVector,rep(wordColor,length(words[!is.na(words)])))
}
WordsColorVector <- character()
WordsVector <- character()
WordsFreqVector <- numeric();
##Iterate over Data Frame
itrGoogleSpreadSheet <- ihasNext(googleSpreadSheet)
itrVectorWeights <- ihasNext(masterWeightsVector)
itrVectorColor <- ihasNext(masterColorVector)
while (hasNext(itrGoogleSpreadSheet)) {
words = nextElem(itrGoogleSpreadSheet)
if (hasNext(itrVectorWeights)==FALSE){wordFreq = 1} else{wordFreq = nextElem(itrVectorWeights)}
if (hasNext(itrVectorColor)==FALSE){} else{wordColor = nextElem(itrVectorColor)}
if (hasNext(itrGoogleSpreadSheet)==FALSE){ WordsVector = toupper(c(WordsVector,words[!is.na(words)]))}
else{WordsVector <- c(WordsVector,words[!is.na(words)])}
WordsVector <- c(WordsVector,words[!is.na(words)])
WordsFreqVector <-c(WordsFreqVector,rep(wordFreq,length(words[!is.na(words)])))
WordsColorVector <-c(WordsColorVector,rep(wordColor,length(words[!is.na(words)])))
}
fix(WordsVector)
# url <- "https://docs.google.com/spreadsheets/d/12MK9EFmPww4Vw9P6BShmhOolH1C45Irz0jdzE0QR3hs/pubhtml"
#url <- "https://docs.google.com/a/toutbay.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/edit#gid=0"
# url <- "https://docs.google.com/spreadsheets/d/18FUQzBiSr-NFy6aSGR06uXYQMlX2WEkLnC3FqFi3RN0/pubhtml"
library(XML)
cleanGoogleTable <- function(dat, table=1, skip=0, ncols=NA, nrows=-1, header=TRUE, dropFirstCol=NA){
if(!is.data.frame(dat)){
dat <- dat[[table]]
}
if(is.na(dropFirstCol)) {
firstCol <- na.omit(dat[[1]])
if(all(firstCol == ".") || all(firstCol== as.character(seq_along(firstCol)))) {
dat <- dat[, -1]
}
} else if(dropFirstCol) {
dat <- dat[, -1]
}
if(skip > 0){
dat <- dat[-seq_len(skip), ]
}
if(nrow(dat) == 1) return(dat)
if(nrow(dat) >= 2){
if(all(is.na(dat[2, ]))) dat <- dat[-2, ]
}
if(header && nrow(dat) > 1){
header <- as.character(dat[1, ])
names(dat) <- header
dat <- dat[-1, ]
}
# Keep only desired columns
if(!is.na(ncols)){
ncols <- min(ncols, ncol(dat))
dat <- dat[, seq_len(ncols)]
}
# Keep only desired rows
if(nrows > 0){
nrows <- min(nrows, nrow(dat))
dat <- dat[seq_len(nrows), ]
}
# Rename rows
rownames(dat) <- seq_len(nrow(dat))
dat
}
readGoogleSheet <- function(url, na.string="", header=TRUE){
stopifnot(require(XML))
# Suppress warnings because Google docs seems to have incomplete final line
suppressWarnings({
doc <- paste(readLines(url), collapse=" ")
})
if(nchar(doc) == 0) stop("No content found")
htmlTable <- gsub("^.*?(<table.*</table).*$", "\\1>", doc)
ret <- readHTMLTable(htmlTable, header=header, stringsAsFactors=FALSE, as.data.frame=TRUE)
lapply(ret, function(x){ x[ x == na.string] <- NA; x})
}
library(wordcloud)
library(tm)
library(iterators)
library(itertools)
library(RColorBrewer)
library(GOsummaries)
